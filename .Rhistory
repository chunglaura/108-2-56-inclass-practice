)
levels(studentHeights$年齡層)
# studentHeights$`年齡層`
pick1<-studentHeights$年齡層=="6-8"&studentHeights$類別=="總計"
studentHeights$年齡層
pick1
pick2<-studentHeights$平均身高[pick1]
pick3<-as.character(pick2)
pick4<-as.integer(pick3)
pick13<-mean(pick4)
class(pick4)
pick5<-studentHeights$年齡層=="9-12"&studentHeights$類別=="總計"
studentHeights$年齡層
pick5
pick6<-studentHeights$平均身高[pick5]
pick7<-as.character(pick6)
pick8<-as.integer(pick7)
pick14<-mean(pick8)
class(pick8)
pick9<-studentHeights$年齡層=="13-15"&studentHeights$類別=="總計"
studentHeights$年齡層
pick9
pick10<-studentHeights$平均身高[pick9]
pick11<-as.character(pick10)
pick12<-as.integer(pick11)
pick15<-mean(pick12)
class(pick12)
averageHeightByGroup<-c(pick13,pick14,pick15)
names(averageHeightByGroup)<-c("6-8", "9-12", "13-15")
averageHeightByGroup
# averageHeightByGroup
pick1<-studentHeights$年齡層=="6-8"&studentHeights$類別=="總計"
studentHeights$年齡層
pick1
pick2<-studentHeights$平均身高[pick1]
pick3<-as.character(pick2)
pick4<-as.integer(pick3)
pick13<-mean(pick4)
class(pick4)
pick5<-studentHeights$年齡層=="9-12"&studentHeights$類別=="總計"
studentHeights$年齡層
pick5
pick6<-studentHeights$平均身高[pick5]
pick7<-as.character(pick6)
pick8<-as.integer(pick7)
pick14<-mean(pick8)
class(pick8)
pick9<-studentHeights$年齡層=="13-15"&studentHeights$類別=="總計"
studentHeights$年齡層
pick9
pick10<-studentHeights$平均身高[pick9]
pick11<-as.character(pick10)
pick12<-as.integer(pick11)
pick15<-mean(pick12)
class(pick12)
averageHeightByGroup<-c(pick13,pick14,pick15)
names(averageHeightByGroup)<-c("6-8", "9-12", "13-15")
averageHeightByGroup
# averageHeightByGroup
select1<-studentHeights$年齡層=="6-8"&studentHeights$類別=="男"
select2<-studentHeights$平均身高[select1]
select3<-as.character(select2)
select4<-as.integer(select3)
ans1<-mean(select4)
select5<-studentHeights$年齡層=="6-8"&studentHeights$類別=="女"
select6<-studentHeights$平均身高[select5]
select7<-as.character(select6)
select8<-as.integer(select7)
ans2<-mean(select8)
select9<-studentHeights$年齡層=="9-12"&studentHeights$類別=="男"
select10<-studentHeights$平均身高[select9]
select11<-as.character(select10)
select12<-as.integer(select11)
ans3<-mean(select12)
select13<-studentHeights$年齡層=="9-12"&studentHeights$類別=="女"
select14<-studentHeights$平均身高[select13]
select15<-as.character(select14)
select16<-as.integer(select15)
ans4<-mean(select16)
select17<-studentHeights$年齡層=="13-15"&studentHeights$類別=="男"
select18<-studentHeights$平均身高[select17]
select19<-as.character(select18)
select20<-as.integer(select19)
ans5<-mean(select20)
select21<-studentHeights$年齡層=="13-15"&studentHeights$類別=="女"
select22<-studentHeights$平均身高[select21]
select23<-as.character(select22)
select24<-as.integer(select23)
ans6<-mean(select24)
heightDifferenceByGroup<-c(ans1-ans2,ans3-ans4,ans5-ans6)
names(heightDifferenceByGroup)<-c("6-8", "9-12", "13-15")
heightDifferenceByGroup
# heightDifferenceByGroup
select1<-studentHeights$年齡層=="6-8"&studentHeights$類別=="男"
select2<-studentHeights$平均身高[select1]
select3<-as.character(select2)
select4<-as.integer(select3)
ans1<-mean(select4)
select5<-studentHeights$年齡層=="6-8"&studentHeights$類別=="女"
select6<-studentHeights$平均身高[select5]
select7<-as.character(select6)
select8<-as.integer(select7)
ans2<-mean(select8)
select9<-studentHeights$年齡層=="9-12"&studentHeights$類別=="男"
select10<-studentHeights$平均身高[select9]
select11<-as.character(select10)
select12<-as.integer(select11)
ans3<-mean(select12)
select13<-studentHeights$年齡層=="9-12"&studentHeights$類別=="女"
select14<-studentHeights$平均身高[select13]
select15<-as.character(select14)
select16<-as.integer(select15)
ans4<-mean(select16)
select17<-studentHeights$年齡層=="13-15"&studentHeights$類別=="男"
select18<-studentHeights$平均身高[select17]
select19<-as.character(select18)
select20<-as.integer(select19)
ans5<-mean(select20)
select21<-studentHeights$年齡層=="13-15"&studentHeights$類別=="女"
select22<-studentHeights$平均身高[select21]
select23<-as.character(select22)
select24<-as.integer(select23)
ans6<-mean(select24)
heightDifferenceByGroup<-c(ans1-ans2,ans3-ans4,ans5-ans6)
names(heightDifferenceByGroup)<-c("6-8", "9-12", "13-15")
heightDifferenceByGroup
# heightDifferenceByGroup
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
levels(factor(differentMajors))
factor(differentMajors)
a<-'不動產'
b<-'城鄉'
c<-'與'
d<-'環境'
e<-'學系'
realEstateRegex<-paste0(paste0(a,b,e),'|',paste0(a,"?",c,b,d,e))
# realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
currentLevels<-levels(factor(differentMajors))
class(currentLevels)
# currentLevels
bSchoolRegex<-c("休運系|休?閒與運動管理學系|金融系|金?融?與合作學系|金?融?與?合?作?經營學系" )
# bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
levels(factor(differentMajors))
factor1<-factor(differentMajors)
fact<-c("不動系","不動系","不動系","公行系","公行系","公行系","休運系","休運系","社工系","社工系","社會系","社會系","金融系","金融系","金融系","經濟系","經濟系")
levels(factor1)<-fact
differentMajors<-factor1
class(differentMajors)
# differentMajors
school<-differentMajors
school
dep1<-"休運系|金融系"
dep2<-"經濟系|社會系|社?工系"
dep3<-"公行系|不動系"
school<- str_replace(school,
dep1, "商學院")
school<- str_replace(school,
dep2, "社科院")
school<- str_replace(school,
dep3, "公共事務學院")
factor(school)
# school
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
pick_小新 <- example$name == "小新"
library(purrr)
pick_小新 <- example$name == "小新"
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example, ~.x[pick_小新]) ->
data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
View(dance)
# 第一個dance表演名稱
dance[[1]]$title
# 第二個dance表演名稱
dance[[2]]$title
map(dance, ~.x$title) ->
list_titles
View(list_titles)
map(dance, ~.x$title) ->
list_titles
View(list_titles)
# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)
# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
str(dance[[4]]$showInfo)
str(dance[[4]]$showInfo)
# 這個表演第1個場次的訊息
dance[[4]]$showInfo[[1]]$time
# 這個表演第2個場次的訊息
dance[[4]]$showInfo[[2]]$time
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
threeHeigths <- c(Gary=178, John=182, Cam=175)
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
names(sort(threeHeigths, decreasing = T))[[1]] -> highestPerson
library(magrittr)
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
sort(threeHeigths, decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
f(w) -> x
f(w) -> x
f(w) %>%
g(.) %>%
h(.) -> z
w %>%
f(.) %>%
g(.) %>%
h(.) -> z
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
num <- c(2,97,22,15,7)
# 選出大於50的數字
(num > 50) -> pick_big
num[pick_big]
(num > 50) %>%
num[.]
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
levels(region) %>%
str_replace("台北","北部") %>%
str_replace("花蓮|台東","東部") %>%
str_replace("台中","中部") ->
levels(region)
# 資料
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# 分析步驟
names(sort(population)) -> setLevels
factor(cities, levels = setLevels) -> cities
population %>%
sort() %>%
names() %>%
factor(cities, levels=.) -> cities
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
View(cpiByIncome)
names(cpiByIncome[[1]]) -> names_element1
# names_element1
list_items <- map(cpiByIncome, ~.x$Item)
items <- unlist(list_items)
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
factor(items) -> items
# items
items -> family_type
items -> family_type
levels(family_type) -> currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
# family_type
items -> family_type
levels(family_type) -> currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
# family_type
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
source("https://www.dropbox.com/s/aow5y2772r8ratb/regexPatternCheck.R?dl=1", encoding = "UTF-8")
jsonlite::fromJSON("https://www.dropbox.com/s/8wgdef4v44k1w0g/tpe_highSchools.json?dl=1") -> tpe_highSchools
tpe_highSchools <- factor(tpe_highSchools)
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
View(params)
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
levels(tpe_highSchools)
# tpe_highSchools
tpe_highSchools<-factor(tpe_highSchools,levels=c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高","台北市立中山女中","臺北市立中山女子高級中學","國立政大附中","國立政治大學附屬高級中學"))
tpe_highSchools
tpe_highSchools<-factor(tpe_highSchools,levels=c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高","台北市立中山女中","臺北市立中山女子高級中學","國立政大附中","國立政治大學附屬高級中學"))
#tpe_highSchools
tpe_highSchools<-factor(tpe_highSchools,levels=c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高","台北市立中山女中","臺北市立中山女子高級中學","國立政大附中","國立政治大學附屬高級中學"))
#tpe_highSchools
tpe_highSchools<-factor(tpe_highSchools,levels=c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高","台北市立中山女中","臺北市立中山女子高級中學","國立政大附中","國立政治大學附屬高級中學"))
#tpe_highSchools
tpe_highSchools<-factor(tpe_highSchools,levels=c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高","台北市立中山女中","臺北市立中山女子高級中學","國立政大附中","國立政治大學附屬高級中學"))
#tpe_highSchools
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
levels(tpe_highSchools)
#tpe_highSchools
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學","北一女")
tpe_highSchools[c(680,681,682,683,684,685,686,687,688,689)]<-c(rep("北一女", times = 10))
#tpe_highSchools
View(courseStructure)
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學","北一女")
tpe_highSchools[c(680,681,682,683,684,685,686,687,688,689)]<-c(rep("北一女", times = 10))
tpe_highSchools
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
tpe_highSchools<-factor(tpe_highSchools,levels=c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高","台北市立中山女中","臺北市立中山女子高級中學","國立政大附中","國立政治大學附屬高級中學"))
tpe_highSchools
#tpe_highSchools
levels(tpe_highSchools)<-c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
levels(tpe_highSchools)
#tpe_highSchools
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
bSchoolRegex <-
"(金融(與合作)?(經營)?|休(閒與)?運(動管理)?)學?系"
# 或偷懶
bSchoolRegex <-
"(金融與?合?作?經?營?|休閒?與?運動?管?理?)學?系"
# bSchoolRegex
factor(differentMajors) -> differentMajors
currentLevels <- levels(differentMajors)
# currentLevels
bSchoolRegex <-
"(金融(與合作)?(經營)?|休(閒與)?運(動管理)?)學?系"
# 或偷懶
bSchoolRegex <-
"(金融與?合?作?經?營?|休閒?與?運動?管?理?)學?系"
# bSchoolRegex
regex_hs1st <- 臺?台?北市?立?第?一女子?高?級?中?學?
# regex_hs1st
regex_hs1st <- 臺?台?北市?立?第?一女子?高?級?中?學?
regex_hs1st
regex_hs1st <- "臺?台?北市?立?第?一女子?高?級?中?學?"
#regex_hs1st
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hs1st <- "臺?台?北市?立?第?一女子?高?級?中?學?"
regex_hs1st
source("https://www.dropbox.com/s/aow5y2772r8ratb/regexPatternCheck.R?dl=1", encoding = "UTF-8")
source("https://www.dropbox.com/s/aow5y2772r8ratb/regexPatternCheck.R?dl=1", encoding = "UTF-8")
jsonlite::fromJSON("https://www.dropbox.com/s/8wgdef4v44k1w0g/tpe_highSchools.json?dl=1") -> tpe_highSchools
tpe_highSchools <- factor(tpe_highSchools)
`全宗名編號`<-str_extract(data228$`檔號`,"[:upper:][:graph:]+[:upper:](?=/)")
`全宗名編號`<-factor(`全宗名編號`)
`年`<-str_extract(data228$`檔號`,"(?<=/)[:alnum:]{4}(?=/)")
`年`<-as.integer(`年`)
data228[["全宗名編號"]]<-`全宗名編號`
data228[["年"]]<-`年`
data228[c("全宗名編號","年")]
# data228[c("全宗名編號","年")]
pick_note<-data228$`檔號`[data228$`附註`=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"]
pick_name<-data228$`個人名稱`[data228$檔號==pick_note]
victims<-levels(factor(pick_name))
victims
# victims
check_regexRestriction("高級中學",regex_hsTitle)
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
`全宗名編號`<-str_extract(data228$`檔號`,"[:upper:][:graph:]+[:upper:](?=/)")
`全宗名編號`<-factor(`全宗名編號`)
`年`<-str_extract(data228$`檔號`,"(?<=/)[:alnum:]{4}(?=/)")
`年`<-as.integer(`年`)
data228[["全宗名編號"]]<-`全宗名編號`
data228[["年"]]<-`年`
data228[c("全宗名編號","年")]
data228[c("全宗名編號","年")]
pick_note<-data228$`檔號`[data228$`附註`=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"]
pick_name<-data228$`個人名稱`[data228$檔號==pick_note]
victims<-levels(factor(pick_name))
victims
# victims
`全宗名編號`<-str_extract(data228$`檔號`,"[:upper:][:graph:]+[:upper:](?=/)")
`全宗名編號`<-factor(`全宗名編號`)
`年`<-str_extract(data228$`檔號`,"(?<=/)[:alnum:]{4}(?=/)")
`年`<-as.integer(`年`)
data228[["全宗名編號"]]<-`全宗名編號`
data228[["年"]]<-`年`
data228[c("全宗名編號","年")]
`全宗名編號`<-str_extract(data228$`檔號`,"[:upper:][:graph:]+[:upper:](?=/)")
`全宗名編號`<-factor(`全宗名編號`)
`年`<-str_extract(data228$`檔號`,"(?<=/)[:alnum:]{4}(?=/)")
`年`<-as.integer(`年`)
data228[["全宗名編號"]]<-`全宗名編號`
data228[["年"]]<-`年`
data228[c("全宗名編號","年")]
pick_note<-data228$`檔號`[data228$`附註`=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"]
pick_name<-data228$`個人名稱`[data228$檔號==pick_note]
victims<-levels(factor(pick_name))
victims
`全宗名編號`<-str_extract(data228$`檔號`,"[:upper:][:graph:]+[:upper:](?=/)")
`全宗名編號`<-factor(`全宗名編號`)
`年`<-str_extract(data228$`檔號`,"(?<=/)[:alnum:]{4}(?=/)")
`年`<-as.integer(`年`)
data228[["全宗名編號"]]<-`全宗名編號`
data228[["年"]]<-`年`
data228[c("全宗名編號","年")]
View(data228)
View(data228)
View(data228)
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
View(courseStructure)
View(courseStructure)
unique(str_extract(courseStructure$`應修系級`,"[\u4E00-\u9FFF]+[:graph:]")) -> majorGradeCombos
majorGradeCombos
majorGradeCombos
pick_note<-data228$`檔號`[data228$`附註`=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"]
pick_name<-data228$`個人名稱`[data228$檔號==pick_note]
victims<-levels(factor(pick_name))
victims
View(data228)
pick_note<-data228$附註[data228$`附註`=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"]
pick_name<-data228$`個人名稱`[data228$附註==pick_note]
victims<-levels(factor(pick_name))
victims
pick_note<-data228$附註[data228$`附註`=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"]
pick_name<-data228$`個人名稱`[data228$附註==pick_note]
victims<-levels(factor(pick_name))
victims
knitr::opts_chunk$set(echo = TRUE)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
knitr::opts_chunk$set(echo = F, eval=F)
library(lubridate); library(jsonlite); library(readr)
install.packages("lubridate")
install.packages("lubridate")
install.packages(c("lubridate"))
install.packages("lubridate")
taiwan_time <- "2019-04-12 12:55:30"
oslo_time <- "18.11.2018 15:33:02"
two_times <- c(
ymd_hms(taiwan_time, tz="Asia/Taipei"),
dmy_hms(oslo_time, tz="Europe/Oslo"))
taiwan_time <- "2019-04-12 12:55:30"
oslo_time <- "18.11.2018 15:33:02"
two_times <- c(
ymd_hms(taiwan_time, tz="Asia/Taipei"),
dmy_hms(oslo_time, tz="Europe/Oslo"))
knitr::opts_chunk$set(echo = TRUE)
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
